/****************************************************************************
Copyright (c) 2010-2011 cocos2d-x.org
Copyright (C) 2008      Apple Inc. All Rights Reserved.
Copyright (c) 2011      Fulcrum Mobile Network, Inc.

http://www.cocos2d-x.org
http://www.openxlive.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace cocos2d
{
    // Structure that contains the values of each particle
    public class tCCParticle
    {
        CCPoint pos;
        CCPoint startPos;

        ccColor4F color;
        ccColor4F deltaColor;

        float size;
        float deltaSize;

        float rotation;
        float deltaRotation;

        // ccTime timeToLive;
        float timeToLive;

        // Mode A: gravity, direction, radial accel, tangential accel
        public class modeA
        {
            CCPoint dir;
            float radialAccel;
            float tangentialAccel;
        }

        // Mode B: radius mode
        public class modeB
        {
            float angle;
            float degreesPerSecond;
            float radius;
            float deltaRadius;
        }
    }

    /// <summary>
    /// @brief Particle System base class.
    /// Attributes of a Particle System:
    /// -emmision rate of the particles
    /// - Gravity Mode (Mode A):
    /// - gravity
    /// - direction
    /// speed +-  variance
    /// - tangential acceleration +- variance
    /// - radial acceleration +- variance
    /// - Radius Mode (Mode B):
    /// - startRadius +- variance
    /// - endRadius +- variance
    /// - rotate +- variance
    /// - Properties common to all modes:
    /// - life +- life variance
    /// - start spin +- variance
    /// - end spin +- variance
    /// - start size +- variance
    /// - end size +- variance
    /// - start color +- variance
    /// - end color +- variance
    /// - life +- variance
    /// - blending function
    /// - texture
    /// cocos2d also supports particles generated by Particle Designer (http://particledesigner.71squared.com/).
    /// 'Radius Mode' in Particle Designer uses a fixed emit rate of 30 hz. Since that can't be guarateed in cocos2d,
    /// cocos2d uses a another approach, but the results are almost identical. 
    /// cocos2d supports all the variables used by Particle Designer plus a bit more:
    /// - spinning particles (supported when using CCParticleSystemQuad)
    /// - tangential acceleration (Gravity mode)
    /// - radial acceleration (Gravity mode)
    /// - radius direction (Radius mode) (Particle Designer supports outwards to inwards direction only)
    /// It is possible to customize any of the above mentioned properties in runtime. Example:
    /// @code
    /// emitter.radialAccel = 15;
    /// emitter.startSpin = 0;
    /// @endcode
    /// </summary>
    public class CCParticleSystem : CCNode, CCTextureProtocol
    {
        // The Particle emitter lives forever 
        const int kCCParticleDurationInfinity = -1;

        // The starting size of the particle is equal to the ending size 
        const int kCCParticleStartSizeEqualToEndSize = -1;

        // The starting radius of the particle is equal to the ending radius 
        const int kCCParticleStartRadiusEqualToEndRadius = -1;

        // backward compatible
        // kParticleStartSizeEqualToEndSize = kCCParticleStartSizeEqualToEndSize;
        // kParticleDurationInfinity = kCCParticleDurationInfinity;

        // Gravity mode (A mode) 
        // const kCCParticleModeGravity;

        // Radius mode (B mode) 
        //const kCCParticleModeRadius;

        enum tCCPositionType
        {
            // Living particles are attached to the world and are unaffected by emitter repositioning. 
            kCCPositionTypeFree,

            // Living particles are attached to the world but will follow the emitter repositioning.
            // Use case: Attach an emitter to an sprite, and you want that the emitter follows the sprite.
            kCCPositionTypeRelative,

            // Living particles are attached to the emitter and are translated along with it. 
            kCCPositionTypeGrouped
        }

        // backward compatible
        // kPositionTypeFree = kCCPositionTypeFree,
        // kPositionTypeGrouped = kCCPositionTypeGrouped,


        protected string m_sPlistFile;
        //! time elapsed since the start of the system (in seconds)
        protected float m_fElapsed;

        // Different modes
        //! Mode A:Gravity + Tangential Accel + Radial Accel
        public class modeA
        {
            /** Gravity value. Only available in 'Gravity' mode. */
            CCPoint gravity;
            /** speed of each particle. Only available in 'Gravity' mode.  */
            float speed;
            /** speed variance of each particle. Only available in 'Gravity' mode. */
            float speedVar;
            /** tangential acceleration of each particle. Only available in 'Gravity' mode. */
            float tangentialAccel;
            /** tangential acceleration variance of each particle. Only available in 'Gravity' mode. */
            float tangentialAccelVar;
            /** radial acceleration of each particle. Only available in 'Gravity' mode. */
            float radialAccel;
            /** radial acceleration variance of each particle. Only available in 'Gravity' mode. */
            float radialAccelVar;
        }

        //! Mode B: circular movement (gravity, radial accel and tangential accel don't are not used in this mode)
        public class modeB
        {
            /** The starting radius of the particles. Only available in 'Radius' mode. */
            float startRadius;
            /** The starting radius variance of the particles. Only available in 'Radius' mode. */
            float startRadiusVar;
            /** The ending radius of the particles. Only available in 'Radius' mode. */
            float endRadius;
            /** The ending radius variance of the particles. Only available in 'Radius' mode. */
            float endRadiusVar;
            /** Number of degress to rotate a particle around the source pos per second. Only available in 'Radius' mode. */
            float rotatePerSecond;
            /** Variance in degrees for rotatePerSecond. Only available in 'Radius' mode. */
            float rotatePerSecondVar;
        }

        //! Array of particles
        tCCParticle m_pParticles;

        // color modulate
        //	BOOL colorModulate;

        //! How many particles can be emitted per second
        float m_fEmitCounter;

        //!  particle idx
        uint m_uParticleIdx;

        // Optimization
        //CC_UPDATE_PARTICLE_IMP	updateParticleImp;
        //SEL						updateParticleSel;

        // profiling
        //#if CC_ENABLE_PROFILERS
        //    CCProfilingTimer* m_pProfilingTimer;
        //#endif

        // Is the emitter active 
        private bool m_bIsActive;
        public bool IsActive
        {
            get
            {
                return m_bIsActive;
            }
        }

        // Quantity of particles that are being simulated at the moment 
        private uint m_uParticleCount;
        public uint ParticleCount
        {
            get
            {
                return m_uParticleCount;
            }
        }

        // How many seconds the emitter wil run. -1 means 'forever' 
        private float m_fDuration;
        public float Duration
        {
            get
            {
                return m_fDuration;
            }
            set
            {
                m_fDuration = value;
            }
        }

        // sourcePosition of the emitter 
        private CCPoint m_tSourcePosition;
        public virtual CCPoint SourcePosition
        {
            get
            {
                return m_tSourcePosition;
            }
            set
            {
                m_tSourcePosition = value;
            }
        }

        // Position variance of the emitter 
        private CCPoint m_tPosVar;
        public virtual CCPoint PosVar
        {
            get
            {
                return m_tPosVar;
            }
            set
            {
                m_tPosVar = value;
            }
        }

        // life, and life variation of each particle 
        private float m_fLife;
        public float Life
        {
            get
            {
                return m_fLife;
            }
            set
            {
                m_fLife = value;
            }
        }

        // life variance of each particle 
        private float m_fLifeVar;
        public float LifeVar
        {
            get
            {
                return m_fLifeVar;
            }
            set
            {
                m_fLifeVar = value;
            }
        }

        // angle and angle variation of each particle 
        private float m_fAngle;
        public float Angle
        {
            get
            {
                return m_fAngle;
            }
            set
            {
                m_fAngle = value;
            }
        }

        // angle variance of each particle 
        private float m_fAngleVar;
        public float AngleVar
        {
            get
            {
                return m_fAngleVar;
            }
            set
            {
                m_fAngleVar = value;
            }
        }



        public CCTexture2D Texture
        {
            get
            {
                throw new NotImplementedException();
            }
            set
            {
                throw new NotImplementedException();
            }
        }

        public ccBlendFunc BlendFunc
        {
            get
            {
                throw new NotImplementedException();
            }
            set
            { throw new NotImplementedException(); }
        }
    }
}
